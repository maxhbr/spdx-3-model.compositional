@startuml
left to right direction

title A compositional variant of the SPDX3 Model\nmy internal version is roughly 0.5

enum RelationshipType {
DESCRIBES
AMENDS
CONTAINS
...
' ANCESTOR [do we need both?]
' DESCENDANT [do we need both?]
' VARIANT
' DEPENDS_ON
' BUILD_DEPENDENCY
' DEV_DEPENDENCY
' OPTIONAL_DEPENDENCY
' PROVIDED_DEPENDENCY
' TEST_DEPENDENCY
' RUNTIME_DEPENDENCY
' DEPENDENCY_MANIFEST
' DYNAMIC_LINK
' STATIC_LINK
' PREREQUISITE
'
' BUILD_TOOL
' DEV_TOOL
' TEST_TOOL
'
' GENERATES
'
' DISTRIBUTION_ARTIFACT
' EXAMPLE
' DATA_FILE
' TEST_CASE
' DOCUMENTATION
' METAFILE
' TEST
' OPTIONAL_COMPONENT
' PACKAGES
'
' PATCH
' COPY
' EXPANDED_FROM_ARCHIVE
' FILE_ADDED
' FILE_DELETED
' FILE_MODIFIED
'
' SUPPLIED_BY *new*
OTHER
}
enum HashAlgorithm {
SHA1
SHA224
...
' SHA256 [default]
' SHA384
' SHA512
' SHA3-224
' SHA3-256
' SHA3-384
' SHA3-512
' MD2
' MD4
' MD5
' MD6
' SPDX-PVC-SHA1
' SPDX-PVC-SHA256
' BLAKE2b-256
' BLAKE2b-384
' BLAKE2b-512
BLAKE3
}

' RelationshipType -[hidden]-> HashAlgorithm


map ProfileIdentifier {
    name => String
}
map Actor {
    name => String
    actorType => Maybe<ActorType>
    externalIdentifiers => List<ExternalIdentifier>
    nexternalReferences => List<ExternalReference>
}
map CreationInfo {
    specVer => SemVer
    profile => [ProfileIdentifier]
    created => DateTime
    dataLicense => 'CC0'
    createdBy => [Actor]
}
CreationInfo::profile .[#CCCCCC,dashed,thickness=3]. ProfileIdentifier
CreationInfo::createdBy .[#CCCCCC,dashed,thickness=3]. Actor

map Element {
    SPDXID => SPDXID
    creationInfo *--> CreationInfo

    name => Maybe<String>
    summary => Maybe<String>
    description => Maybe<String>
    comment => Maybe<String>
    verifiedUsing => List<IntegrityMethod>
    externalReferences => List<ExternalReference>
    externalIdentifiers => List<ExternalIdentifier>
}
map ExternalReference {
    externalReferenceType => ExternalReferenceType
    locator => IRI
    contentType => Maybe<MediaType>
    comments => Maybe<String>
}
Element::externalReferences .[#CCCCCC,dashed,thickness=3]. ExternalReference
Map Hash {
    algorithm => HashAlgorithm
    hashValue => String
}
Hash::algorithm .[#CCCCCC,dashed,thickness=3]. HashAlgorithm
Element::verifiedUsing .[#CCCCCC,dashed,thickness=3]. Hash
Map ExternalIdentifier {
    externalIdentifierType => ExternalIdentifierType
    identifier => IRI
    comments => Maybe<String>
}
Element::externalIdentifiers .[#CCCCCC,dashed,thickness=3]. ExternalIdentifier

map Artifact {
    _parent *---> Element
    originatedBy => [Actor]
}

map Collection {
    _parent *---> Element
    namespaces => List<NamespaceMap>
    imports => List<ExternalMap>
    elements => List<ElementRef>
    rootElements => List<SPDXID>
}
object NamespaceMap
Collection::namespaces .[#CCCCCC,dashed,thickness=3]. NamespaceMap
object ExternalMap
Collection::imports .[#CCCCCC,dashed,thickness=3]. ExternalMap

map Bundle {
    _parent *--> Collection
    context => Maybe<String>
}

map SpdxDocument {
    _parent *--> Bundle
}

map BOM {
    _parent *--> Bundle
}

map Relationship {
    _parent *--> Element
    relationshipType => RelationshipType
    completeness => KNOWN\nINCOMPLETE\nUNKNOWN
    from => ElementRef
    to => List<ElementRef>
}
Relationship::relationshipType .[#CCCCCC,dashed,thickness=3]. RelationshipType

map Annotation {
    _parent *--> Element
    statement => String
    annotationType => AnnotationType
    contentType => Maybe<MediaType>
    subject => ElementRef
}

map Identity {
    _parent *--> Element
}
map Person {
    _parent *--> Identity
}
map Organization {
    _parent *--> Identity
}
map Tool {
    _parent *--> Identity
}


package software {
    map Package {
        _parent *---> Artifact
        packagePurpose => List<SoftwarePurpose>
        downloadLocation => Maybe<URL>
        homePage => Maybe<URL>
    }
    map File {
        _parent *---> Artifact
        filePurpose => List<SoftwarePurpose>
        contentType => Maybe<MediaType>
    }
    map Snippet {
        _parent *---> Artifact
        snippetPurpose => List<SnippetPurpose>
        location => SnippetLocation
    }
    map SBOM {
        _parent *-> BOM
    }
    map SoftwareDependencyRelationship {
        _parent *---> Relationship
        linkType => NOASSERTION [default] \n| STATIC \n| DYNAMIC \n| OTHER
        scope => NOASSERTION [default] \n| BUILD \n| DEV \n| TEST \n| RUNTIME \n| OTHER
        requirement => NOASSERTION [default] \n| OPTIONAL \n| REQUIRED \n| PROVIDED \n| PREREQUISITE
    }
}

package extensions {
    object ExtensionContent
    map Extension {
        _parent *-----> Element
        extensionIRI => IRI
        documentationURL => URL
        content *--> ExtensionContent
    }
}


@enduml