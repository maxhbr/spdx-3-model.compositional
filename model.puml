@startuml
left to right direction

map CreationInfo {
    specVer => SemVer
    profile => [ProfileIdentifier]
    created => DateTime
    dataLicense => 'CC0'
    createdBy => [Actor]
}
object Extensions
map Element {
    SPDXID => SPDXID
    creationInfo *--> CreationInfo
    name => Maybe<String>
    summary => Maybe<String>
    description => Maybe<String>
    comment => Maybe<String>
    annotations => List<Annotation>
    verifiedUsing => List<IntegrityMethod>
    externalReferences => List<ExternalReference>
    externalIdentifiers => List<ExternalIdentifier>
    extensions *--> Extensions
}
map Annotation {
    statement => Maybe<String>
    annotationType => AnnotationType
    contentType => Maybe<MediaType>
}
Element::annotations .. Annotation
map ExternalReference {
    externalReferenceType => ExternalReferenceType
    locator => IRI
    contentType => Maybe<MediaType>
    comments => Maybe<String>
}
Element::externalReferences .. ExternalReference
Map Hash {
    algorithm => HashAlgorithm
    hashValue => String
}
Element::verifiedUsing .. Hash
Map ExternalIdentifier {
    externalIdentifierType => ExternalIdentifierType
    identifier => IRI
    comments => Maybe<String>
}
Element::externalIdentifiers .. ExternalIdentifier

map Artifact {
    _element *--> Element
    originatedBy => [Actor]
    software =>
    licensing =>
}

map Collection {
    _element *--> Element
    namespaces => List<NamespaceMap>
    imports => List<ExternalMap>
    elments => List<AbstractElement>
    rootElements => List<SPDXID>
    context => Maybe<String>
}

map Relationship {
    _element *--> Element
    relationshipType => RelationshipType
    completness => KNOWN\nINCOMPLETE\nUNKNOWN
    from => AbstractElement
    to => List<AbstractElement>
}

map Actor {
    _element *--> Element
}

map Identity {
    _element *--> Element
    IdentityType => Person\nOrganization\nTool
}


package software {
    map Package {
        packagePurpose => [SoftwarePurpose]
        downloadLocation => Maybe<URL>
        homePage => Maybe<URL>
    }
    map File {
        filePurpose => [SoftwarePurpose]
        contentType => Maybe<MediaType>
    }
    Map Snippet {
        snippetPurpose => [SnippetPurpose]
        location => SnippetLocation
    }
    diamond artifact_software.dia
    artifact_software.dia --> Package
    artifact_software.dia --> File
    artifact_software.dia --> Snippet
    Artifact::software --> artifact_software.dia
}

package licensing {
    map LicensInformation {
        licenseConcluded => LicenseExpression
        LicenseInfoInFile => LicenseExpression
        CopyrightText => [String]
    }
    Artifact::licensing --> LicensInformation
}




map ElementRef {
    SPDXID => SPDXID
}
ElementRef::SPDXID .. Element::SPDXID


abstract AbstractElement
AbstractElement : SPDXID: SPDXID
AbstractElement <|-- ElementRef
AbstractElement <|-- Identity
AbstractElement <|-- Actor
AbstractElement <|-- Relationship
AbstractElement <|-- Collection
AbstractElement <|-- Artifact

@enduml