@startuml
left to right direction

map CreationInfo {
    specVer => SemVer
    profile => [ProfileIdentifier]
    created => DateTime
    dataLicense => 'CC0'
    createdBy => [Actor]
}
object VerifiedUsing
object ExternalReferences
object ExternalIdentifiers
object Extensions
rectangle element {
    abstract AbstractElement
    AbstractElement : SPDXID: SPDXID
    map Element {
        SPDXID => SPDXID
        creationInfo *--> CreationInfo
        name => Maybe<String>
        summary => Maybe<String>
        description => Maybe<String>
        comment => Maybe<String>
        annotations => List<Annotation>
        verifiedUsing *--> VerifiedUsing
        externalReferences *--> ExternalReferences
        externalIdentifiers *--> ExternalIdentifiers
        extensions *--> Extensions
    }
    AbstractElement <|--- Element
    map ElementRef {
        SPDXID => SPDXID
    }
    AbstractElement <|- ElementRef
    ElementRef::SPDXID .> Element::SPDXID
    diamond dia
    dia --> Element
}

map Artifact {
    _element *---> element.dia
    originatedBy => [Actor]
    software =>
    licensing =>
}

map Collection {
    _element *---> element.dia
    namespaces => List<NamespaceMap>
    imports => List<ExternalMap>
    elments => List<AbstractElement>
    rootElements => List<SPDXID>
    context => Maybe<String>
}

map Relationship {
    _element *---> element.dia
    relationshipType => RelationshipType
    completness => RelationshipCompletness
    from => AbstractElement
    to => List<AbstractElement>
}

map Actor {
    _element *---> element.dia
}

map Identity {
    _element *---> element.dia
    IdentityType => Person\nOrganization\nTool
}



' package profile_software {
'     map Package {
'         _artifact *--> Artifact
'         packagePurpose => [SoftwarePurpose]
'         downloadLocation => Maybe<URL>
'         homePage => Maybe<URL>
'     }
'     map File {
'         _artifact *--> Artifact
'         filePurpose => [SoftwarePurpose]
'         contentType => Maybe<MediaType>
'     }
'     Map Snippet {
'         _artifact *--> Artifact
'         snippetPurpose => [SnippetPurpose]
'         location => SnippetLocation
'     }
'     map SBOM {
'         _collection *--> Collection
'     }
' }
' package profile_licensing {
'     map profile_licensing.Package {
'         _artifact *--> Artifact
'     }
' }

package software {
    map Package {
        packagePurpose => [SoftwarePurpose]
        downloadLocation => Maybe<URL>
        homePage => Maybe<URL>
    }
    map File {
        filePurpose => [SoftwarePurpose]
        contentType => Maybe<MediaType>
    }
    Map Snippet {
        snippetPurpose => [SnippetPurpose]
        location => SnippetLocation
    }
    diamond artifact_software.dia
    artifact_software.dia --> Package
    artifact_software.dia --> File
    artifact_software.dia --> Snippet
    Artifact::software --> artifact_software.dia
}

package licensing {
    map LicensInformation {
        licenseConcluded => 
        LicenseInfoInFile =>
        CopyrightText =>
    }
    Artifact::licensing --> LicensInformation
}

@enduml